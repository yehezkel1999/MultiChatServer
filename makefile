#
#	Author: Tal Ben Yehezkel
#
# makefile cheat sheet:
#
# VERY IMPORTANT: makefiles are whitespace sensitive, meaning that 
# unaligned text and/or random whitespaces can cause it not to work,
# so if everything looks proper and it still doesn't work it's probably
# that.
# 
# target: dependencies
# 	commands
#
# when the dependencies change the target gets generated by executing
# the given commands.
# 
# $@: name of the target being generated.
# $<: first dependency.
# $^: all of the dependencies.
# $(VARIABLE): use a variable'
#
# *: search file system for matching file names
# %: either matches one or more characters in a string, replaces the 
# 	 matched string with a string, or used in rule definitions in some 
# 	 functions.
#
# wildcard: generates a space seperated list of names of the existing
# 			files that match one of the given file name patterns.
# patsubst: takes a string to replace, what to replace it with, and a 
# 			list of files, and replaces the strings accourdingly.
# 
# compiler flags:
# -c: create an object file rather than an executable.
# -o: create an executable with a name.
# -g: debug flag
# -Wall: enables compiler warnings

SOCK_DIR:=/home/hezi/projects/cpp/socket/
SOCK_MAKE:=$(SOCK_DIR)make
SOCK_OBJ:=$(SOCK_DIR)Socket.so
MAKE_SOCK:=cd $(SOCK_DIR) && make

# compiler:
CC:=g++
# compiler flags: 
CFLAGS=-g -Wall
# linker flags, -L<path>: look in the path for libraries, -lsocket: link with libsocket:
LDFLAGS:=-L$(SOCK_DIR) -lsocket
# remove command (predefined as rm -f):
RM:=rm -f
# zip command:
ZIP:=zip

# .cpp and .h files directory:
SRC:=src
# object files directory:
OBJ:=obj

# all of the source files: 
SRCS:=$(shell find $(SRC)/ -name *.cpp)
# $(info $$SRCS is [${SRCS}])

# all of the object files, from the list of cpp files, swap out .cpp with .o,
# reverse, cut the full path out, reverse again:
OBJS:=$(shell find src/ -name *.cpp | sed s/.cpp/.o/g | sed 's/src/obj/')
#$(info $$OBJS is [${OBJS}])

# all of the header files:
HDRS:=$(wildcard $(SRC)/*.h)

# binary name:
BIN:=server
# zipped file name in case the code needs to be submitted as a zipped file
SUBMIT:=server.zip

# the target to be executed when the makefile is executed (command: make)
all: sockd
all: $(BIN)

# make socket library in debug mode
sockd:
	$(MAKE_SOCK)

# make socket library in release mode
sockr:
	$(MAKE_SOCK) release


# release build: cleans the build and rebuilds it with optimazation flags 
# rather than debug flags (command: make release)
release: CFLAGS=-O2 -DNDEBUG
release: clean
release: sockr
release: $(BIN)

# make the binary with the given compiler, flags and all obj files.
$(BIN): $(OBJS) $(OBJ)/
	$(CC) $(CFLAGS) $(OBJS) -o $@ $(LDFLAGS)

# make every obj file with the corresponding cpp file.
$(OBJ)/%.o: $(SRC)/%.cpp $(OBJ)/
	mkdir -p $(@D)
	$(CC) $(CFLAGS) -c $< -o $@

# creates obj files directory (if it does not already exist).
$(OBJ)/:
	mkdir -p $@

# deletes the binary, all the files in the obj files directory, and 
# debug symbols (command: make clean)
clean:
	$(RM) -r $(OBJ)/
	$(RM) $(BIN)
	$(RM) *.o

# deletes the previously made zipped file and zips the binary, and
# the source files directory (command: make submit) 
zip:
	$(RM) $(SUBMIT)
	$(ZIP) $(SUBMIT) $(BIN) $(SRC)/
